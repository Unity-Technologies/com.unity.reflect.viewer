using System;
using System.Linq;

namespace UnityEngine.Reflect.Viewer.Core
{
    public class ObjectNames
    {
        static bool IsDigit(char c) { return c >= '0' && c <= '9'; }
        static bool IsAlpha(char c) { return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'); }
        static bool IsAlphaNumeric(char c) { return IsDigit(c) || IsAlpha(c); }
        public static string NicifyVariableName(string propertyName)
        {
            // Skip start characters
            if (propertyName[0] == 'm' && propertyName[1] == '_')
                propertyName = propertyName.Substring(2, propertyName.Length - 2);
            else if (propertyName[0] == '_')
                propertyName = propertyName.Substring(1, propertyName.Length - 1);

            if (propertyName[0] == 'k' && (propertyName[1] >= 'A' && propertyName[1] <= 'Z'))
                propertyName = propertyName.Substring(1, propertyName.Length - 1);

            var index = 0;
            string nicePropertyName = "";
            bool prevUpperOrDigit = false;
            bool prevDigit = false;
            bool isGeneratedName = false;
            uint knownNameLen = 0;

            if (propertyName[index] >= 'a' &&  propertyName[index] <= 'z')
            {
                // Make first character upper case
                nicePropertyName += (char)(propertyName[index++] - ('a' - 'A'));
                prevUpperOrDigit = true;
            }

            // Add spaces between lowercase/uppercase characters and copy from out to in
            bool prevLower = false;
            while (index < propertyName.Length)
            {
                var c = propertyName[index];

                // if this is this capital or number: we might have start of word
                var isUpper = (c >= 'A' && c <= 'Z');
                var isDigit = (c >= '0' && c <= '9');
                if (isUpper || isDigit)
                {
                    // if previous was lowercase (aaaAaa): insert space (aaa Aaa)
                    if (prevLower)
                    {
                        var insertSpace = true;

                        // except for cases where we have things as common in filter names, e.g. "5x5":
                        // check if previous was 'x' and we had a digit before that
                        if (isDigit && (index - propertyName.Length >= 2))
                        {
                            if (propertyName[index-1] == 'x' && propertyName[index-2] >= '0' && propertyName[index-2] <= '9')
                                insertSpace = false;
                        }

                        if (insertSpace)
                            nicePropertyName += ' ';
                    }
                    else
                    {
                        // if previous is uppercase, this is uppercase, and next is lowercase: insert space
                        // "CPUTime" -> "CPU Time".
                        // Don't do this for number sequences though, i.e. don't turn 10p into "1 0p".
                        var cnext = propertyName[index+1]; // next char, or zero terminator
                        var nextLower = (cnext >= 'a' && cnext <= 'z');
                        if (prevUpperOrDigit && nextLower && !(prevDigit && isDigit))
                            nicePropertyName += ' ';
                    }
                    prevLower = false;
                    prevUpperOrDigit = true;
                    prevDigit = isDigit;
                }
                else if (c == '<')
                {
                    // Compiler generated name, produced by e.g. [field: SerializeField] int AutoGeneratedProperty { get; set; }
                    // https://github.com/dotnet/roslyn/blob/c239147f0e0a205c04b325c0399ef8e19b84c6db/src/Compilers/CSharp/Portable/Symbols/Synthesized/GeneratedNames.cs#L28
                    isGeneratedName = true;
                    ++index;
                    continue;
                }
                else if (isGeneratedName && c == '>')
                {
                    ++index;
                    if (propertyName.Substring(index, 15) == "k__BackingField")
                    {
                        index += 15;
                    }
                    else
                    {
                        nicePropertyName += ' ';
                    }
                    continue;
                }
                else
                {
                    prevLower = (c >= 'a' && c <= 'z');
                    prevUpperOrDigit = false;
                    prevDigit = false;
                }

                nicePropertyName += c;
                ++index;
            }

            return nicePropertyName;
        }
    }
}
